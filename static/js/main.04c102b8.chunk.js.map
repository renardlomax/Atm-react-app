{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ATMDeposit","onChange","isDeposit","isValid","console","log","className","Number","placeholder","id","type","width","disabled","value","Account","React","useState","deposit","setDeposit","totalState","setTotalState","setIsDeposit","atmMode","setAtmMode","validTransaction","setValidTransaction","status","onSubmit","event","preventDefault","class","e","target","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"yLAIMA,EAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAIvC,OAFAC,QAAQC,IAAR,yBAA8BH,IAC9BE,QAAQC,IAAI,UAAWF,GAErB,wBAAOG,UAAU,aAAjB,UACE,mCALW,CAAC,UAAW,aAKTC,QAAQL,OADxB,KAEI,uBAAQM,YAAY,eAAeC,GAAG,eAAeC,KAAK,SAASC,MAAM,MAAMV,SAAWA,IAC5F,uBAAOS,KAAK,SAASE,UAAWT,EAAUQ,MAAM,MAAME,MAAM,SAASJ,GAAG,qBAgEhEK,EA3DE,WACd,MAA8BC,IAAMC,SAAS,GAA7C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCH,IAAMC,SAAS,GAAnD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAkCL,IAAMC,UAAS,GAAjD,mBAAOd,EAAP,KAAkBmB,EAAlB,KACA,EAA8BN,IAAMC,SAAS,IAA7C,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAAgDR,IAAMC,UAAS,GAA/D,mBAAOQ,EAAP,KAAyBC,EAAzB,KAEIC,EAAM,4BAAwBP,EAAxB,KACVf,QAAQC,IAAR,2CAAgDH,IA+BhD,OACE,8BAEL,uBAAMyB,SAlBkB,SAACC,GAEpBR,EADelB,EAAYiB,EAAaF,EAAUE,EAAaF,GAE/DQ,GAAoB,GACpBG,EAAMC,kBAcX,UAEO,oBAAIpB,GAAG,QAAP,SAAgBiB,IAChB,uBAAOpB,UAAW,SAAlB,+BACA,yBAAQwB,MAAO,MAAM7B,SAAU,SAAC8B,GAAD,OAhBTH,EAgBiCG,EAfzDN,GAAoB,GACpBF,EAAWK,EAAMI,OAAOnB,YACE,YAAvBe,EAAMI,OAAOnB,MACdQ,GAAa,GAEbA,GAAa,IANQ,IAACO,GAgBqCK,KAAK,OAAOxB,GAAG,cAA1E,UACA,wBAAQA,GAAG,eAAeI,MAAM,KAChC,wBAAQJ,GAAG,oBAAoBI,MAAM,UAArC,qBACA,wBAAQJ,GAAG,qBAAqBI,MAAM,YAAtC,4BAEgB,KAAZS,IACJ,cAAC,EAAD,CAAYrB,SA3CK,SAAC2B,GAGpB,GAFAxB,QAAQC,IAAR,uBAA4BuB,EAAMI,OAAOnB,QACzCT,QAAQC,IAAI,cAAcuB,EAAMI,OAAOnB,OACpCN,OAAOqB,EAAMI,OAAOnB,QAAU,EAC/B,OAAOY,GAAoB,GAEd,cAAZH,GAA4Bf,OAAOqB,EAAMI,OAAOnB,OAASM,EAC1DM,GAAoB,GAEpBA,GAAoB,GAGtBP,EAAWX,OAAOqB,EAAMI,OAAOnB,SA+BOX,UAAWA,EAAWC,QAASqB,UCzD5DU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.04c102b8.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst ATMDeposit = ({ onChange, isDeposit, isValid}) => {\n    const choice = ['Deposit', 'Cash Back'];\n    console.log(`ATM isDeposit: ${isDeposit}`);\n    console.log('isValid', isValid)\n    return (\n      <label className=\"label huge\">\n        <h3 > {choice[Number(!isDeposit)]}</h3>\n        $ <input  placeholder=\"enter amount\" id=\"number-input\" type=\"number\" width=\"200\" onChange= {onChange}></input>\n        <input type=\"submit\" disabled={!isValid}  width=\"200\" value=\"Submit\" id=\"submit-input\"></input>\n      </label>\n    );\n  };\n  \n  const Account = () => {\n    const [deposit, setDeposit] = React.useState(0);\n    const [totalState, setTotalState] = React.useState(0);\n    const [isDeposit, setIsDeposit] = React.useState(true);\n    const [atmMode, setAtmMode] = React.useState(\"\");\n    const [validTransaction, setValidTransaction] = React.useState(false);\n \n    let status = `Account Balance $ ${totalState} `;\n    console.log(`Account Rendered with isDeposit: ${isDeposit}`);\n    const handleChange = (event) => {\n      console.log(`handleChange ${event.target.value}`);\n      console.log('type',typeof(event.target.value))\n      if(Number(event.target.value) <= 0){\n        return setValidTransaction(false);\n      }\n      if(atmMode === \"Cash Back\" && (Number(event.target.value) > totalState)){\n        setValidTransaction(false)\n      }else{\n        setValidTransaction(true)\n      }\n      \n      setDeposit(Number(event.target.value));\n    };\n    \n    const handleSubmit = (event) => {\n      let newTotal = isDeposit ? totalState + deposit : totalState - deposit;\n      setTotalState(newTotal);\n      setValidTransaction(false);\n      event.preventDefault();\n    };\n    const handleModeSelect = (event) => {\n      setValidTransaction(false);\n      setAtmMode(event.target.value);\n      if(event.target.value === \"Deposit\"){\n        setIsDeposit(true);\n      }else{\n        setIsDeposit(false);\n      }\n    }\n    return ( \n      <div>\n        \n <form onSubmit={handleSubmit}>\n   \n        <h2 id=\"total\">{status}</h2>\n        <label className= \"labels\">Select Opperation</label>\n        <select class= \"tab\" onChange={(e) => handleModeSelect(e)} name=\"mode\" id=\"mode-select\">\n        <option id=\"no-selection\" value=\"\"></option>\n        <option id=\"deposit-selection\" value=\"Deposit\">Deposit</option>\n        <option id=\"cashback-selection\" value=\"Cash Back\">Cash Back</option>\n        </select>\n        { !(atmMode === \"\") &&\n        <ATMDeposit onChange={handleChange} isDeposit={isDeposit} isValid={validTransaction}></ATMDeposit>\n        }\n      </form>\n    </div>\n    );\n  };\n  \n export default Account\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Account from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <Account />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vital\nreportWebVitals();\n\n"],"sourceRoot":""}